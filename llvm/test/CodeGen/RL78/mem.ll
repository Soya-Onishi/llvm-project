; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rl78 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RL78

; TODO
; store_indRP_r
; store_indRPbyte_r

define i8 @load_r_addr16(ptr %a) nounwind {
; RL78-LABEL: load_r_addr16:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOV   A, !16384
; RL78-NEXT:    RET
  %1 = inttoptr i16 16384 to ptr
  %2 = load volatile i8, ptr %1
  ret i8 %2
}

define i8 @load_r_indRP(ptr %a) nounwind {
; RL78-LABEL: load_r_indRP:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOVW  DE, AX
; RL78-NEXT:    MOV   A, [DE]
; RL78-NEXT:    RET
  %1 = load volatile i8, ptr %a
  ret i8 %1
}

define i8 @load_r_indRPbyte(ptr %a) nounwind {
; RL78-LABEL: load_r_indRPbyte:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOVW  DE, AX
; RL78-NEXT:    MOV   A, [DE + 42]
; RL78-NEXT:    RET
  %1 = getelementptr i8, ptr %a, i8 42
  %2 = load volatile i8, ptr %1
  ret i8 %2
}

define void @store_addr16_r(i8 %a) nounwind {
; RL78-LABEL: store_addr16_r:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOV   !54321, A
; RL78-NEXT:    RET
  %1 = inttoptr i16 54321 to ptr
  store volatile i8 %a, ptr %1
  ret void
}

define void @store_addr16_i() nounwind {
; RL78-LABEL: store_addr16_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOV   !54321, #42
; RL78-NEXT:    RET
  %1 = inttoptr i16 54321 to ptr
  store volatile i8 42, ptr %1
  ret void
}

define void @store_indRP_i(ptr %a) nounwind {
; RL78-LABEL: store_indRP_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOVW  DE, AX
; RL78-NEXT:    MOV   [DE + 0], #42
; RL78-NEXT:    RET
  store volatile i8 42, ptr %a
  ret void
}

define void @store_indRPbyte_i(ptr %a) nounwind {
; RL78-LABEL: store_indRPbyte_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOVW  DE, AX
; RL78-NEXT:    MOV   [DE + 42], #64
; RL78-NEXT:    RET
  %1 = getelementptr i8, ptr %a, i8 42
  store volatile i8 64, ptr %1
  ret void
}

@G = global i8 0
define i8 @load_store_byte_global() nounwind {
; RL78-LABEL: load_store_byte_global:
; RL78:       ; %bb.0:
; RL78-NEXT:    MOVW  DE, #_G
; RL78-NEXT:    MOV   A, [DE]
; RL78-NEXT:    MOV   [DE], A
; RL78-NEXT:    MOV   A, [DE + 42]
; RL78-NEXT:    MOV   [DE + 42], A
; RL78-NEXT:    RET
  %1 = load volatile i8, ptr @G
  store volatile i8 %1, ptr @G
  %2 = getelementptr i8, ptr @G, i8 42
  %3 = load volatile i8, ptr %2
  store volatile i8 %3, ptr %2
  ret i8 %3
}
