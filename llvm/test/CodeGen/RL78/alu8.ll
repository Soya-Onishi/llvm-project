; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=rl78 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RL78

; Register-immediate instructions

define i8 @add_r_i(i8 %a) nounwind {
; RL78-LABEL: add_r_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    ADD   A, #1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = add i8 %a, 1
  ret i8 %1
}

define i8 @add_A_A(i8 %a) nounwind {
; RL78-LABEL: add_A_A:
; RL78:       ; %bb.0:
; RL78-NEXT:    ADD   A, A
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = add i8 %a, %a
  ret i8 %1
}

define i8 @add_A_addr16(i8 %a) nounwind {
; RL78-LABEL: add_A_addr16:
; RL78:       ; %bb.0:
; RL78-NEXT:    ADD   A, !57005
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = inttoptr i16 57005 to ptr
  %2 = load volatile i8, ptr %1
  %3 = add i8 %a, %2
  ret i8 %3
}

define i8 @sub_r_i(i8 %a) nounwind {
; RL78-LABEL: sub_r_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    ADD   A, #-1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = sub i8 %a, 1
  ret i8 %1
}

define i8 @and_r_i(i8 %a) nounwind {
; RL78-LABEL: and_r_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    AND   A, #1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = and i8 %a, 1
  ret i8 %1
}

define i8 @or_r_i(i8 %a) nounwind {
; RL78-LABEL: or_r_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    OR   A, #1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = or i8 %a, 1
  ret i8 %1
}

define i8 @xor_r_i(i8 %a) nounwind {
; RL78-LABEL: xor_r_i:
; RL78:       ; %bb.0:
; RL78-NEXT:    XOR   A, #1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = xor i8 %a, 1
  ret i8 %1
}

define i8 @shl_a(i8 %a) nounwind {
; RL78-LABEL: shl_a:
; RL78:       ; %bb.0:
; RL78-NEXT:    SHL   A, 1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = shl i8 %a, 1
  ret i8 %1
}

define i8 @srl_a(i8 %a) nounwind {
; RL78-LABEL: srl_a:
; RL78:       ; %bb.0:
; RL78-NEXT:    SHR   A, 1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = lshr i8 %a, 1
  ret i8 %1
}

define i8 @sra_a(i8 %a) nounwind {
; RL78-LABEL: sra_a:
; RL78:       ; %bb.0:
; RL78-NEXT:    SAR   A, 1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = ashr i8 %a, 1
  ret i8 %1
}

declare i8 @llvm.fshr.i8 (i8 %a, i8 %b, i8 %c)
declare i8 @llvm.fshl.i8 (i8 %a, i8 %b, i8 %c)
define i8 @ror_a(i8 %a) nounwind {
; RL78-LABEL: ror_a:
; RL78:       ; %bb.0:
; RL78-NEXT:    ROR   A, 1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = call i8 @llvm.fshr.i8(i8 %a, i8 %a, i8 1)
  ret i8 %1
}

define i8 @rol_a(i8 %a) nounwind {
; RL78-LABEL: rol_a:
; RL78:       ; %bb.0:
; RL78-NEXT:    ROL   A, 1
; RL78-NEXT:    RET
; TODO: check support for materialising larger constants
  %1 = call i8 @llvm.fshl.i8(i8 %a, i8 %a, i8 1)
  ret i8 %1
}